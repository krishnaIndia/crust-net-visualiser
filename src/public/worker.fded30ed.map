{"version":3,"sources":["..\\node_modules\\promise-worker\\register.js","..\\app\\redux\\dispatcher\\worker.js"],"names":["customWorker","msg","NatType","ANY","EDM","EIM","OS","Windows","OSX","LINUX","tranformOSName","osName","toLowerCase","generatePeerPublicInfo","name","id","isNatTypeMatching","log","filter","matches","NatType1","NatType2","peer_requester","nat_type","peer_responder","isOSMatching","OSType1","OSType2","os","isCountryMatching","CountryType1","CountryType2","geo_info","country_name","isPeerIncluded","arr","requesterPeerId","responderPeerId","length","indexOf","isPeerExcluded","prepareLogs","logs","osCountMap","countryCountMap","peerIdMap","successfulConnections","failedConnections","tcpHpCount","udpHpCount","directCount","from","Date","activityTab","forEach","i","index","hasOwnProperty","isFilteredPassed","IncludePeerId","ExcludePeerId","tcp_hole_punch_result","udp_hole_punch_result","is_direct_successful","isSuccess","isSuccessful","push","includes","createdAt","osCount","countriesCount","peerIds","dateRange","to","filterPieData","total","success","tcpResult","tcpHp","udpResult","udpHp","directResult","direct","data","type","payload","item","search","RegExp"],"mappings":"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","file":"worker.fded30ed.map","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nfunction isPromise (obj) {\n  // via https://unpkg.com/is-promise@2.1.0/index.js\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function'\n}\n\nfunction registerPromiseWorker (callback) {\n  function postOutgoingMessage (e, messageId, error, result) {\n    function postMessage (msg) {\n      /* istanbul ignore if */\n      if (typeof self.postMessage !== 'function') { // service worker\n        e.ports[0].postMessage(msg)\n      } else { // web worker\n        self.postMessage(msg)\n      }\n    }\n    if (error) {\n      /* istanbul ignore else */\n      if (typeof console !== 'undefined' && 'error' in console) {\n        // This is to make errors easier to debug. I think it's important\n        // enough to just leave here without giving the user an option\n        // to silence it.\n        console.error('Worker caught an error:', error)\n      }\n      postMessage([messageId, {\n        message: error.message\n      }])\n    } else {\n      postMessage([messageId, null, result])\n    }\n  }\n\n  function tryCatchFunc (callback, message) {\n    try {\n      return { res: callback(message) }\n    } catch (e) {\n      return { err: e }\n    }\n  }\n\n  function handleIncomingMessage (e, callback, messageId, message) {\n    var result = tryCatchFunc(callback, message)\n\n    if (result.err) {\n      postOutgoingMessage(e, messageId, result.err)\n    } else if (!isPromise(result.res)) {\n      postOutgoingMessage(e, messageId, null, result.res)\n    } else {\n      result.res.then(function (finalResult) {\n        postOutgoingMessage(e, messageId, null, finalResult)\n      }, function (finalError) {\n        postOutgoingMessage(e, messageId, finalError)\n      })\n    }\n  }\n\n  function onIncomingMessage (e) {\n    var payload = e.data\n    if (!Array.isArray(payload) || payload.length !== 2) {\n      // message doens't match communication format; ignore\n      return\n    }\n    var messageId = payload[0]\n    var message = payload[1]\n\n    if (typeof callback !== 'function') {\n      postOutgoingMessage(e, messageId, new Error(\n        'Please pass a function into register().'))\n    } else {\n      handleIncomingMessage(e, callback, messageId, message)\n    }\n  }\n\n  self.addEventListener('message', onIncomingMessage)\n}\n\nmodule.exports = registerPromiseWorker\n","import Register from 'promise-worker/register';\r\nconst customWorker = (msg) => {    \r\n    const NatType = {\r\n        ANY: 'Any',\r\n        EDM: 'EDM',\r\n        EIM: 'EIM'\r\n    }\r\n\r\n    const OS = {\r\n        ANY: 'Any',\r\n        Windows: 'Windows',\r\n        OSX: 'MacOS',\r\n        LINUX: 'Linux'\r\n    }\r\n\r\n    // const PROTOCOL = {\r\n    //     ANY: 'Any',\r\n    //     // TCP_DIRECT: 'TCP_DIRECT',\r\n    //     UDP_HP: 'UDP_HP',\r\n    //     TCP_HP: 'TCP_HP'\r\n    // }\r\n\r\n    const tranformOSName = (osName) => {\r\n        switch (osName.toLowerCase()) {\r\n            case 'linux':\r\n                return OS.LINUX;\r\n            case 'macos':\r\n                return OS.OSX;\r\n            case 'windows':\r\n                return OS.Windows;\r\n            default:\r\n                return osName;\r\n        }\r\n    };\r\n\r\n    const generatePeerPublicInfo = (name, id) => {\r\n        return name + '(' + id + ')'\r\n    };\r\n\r\n\r\n    const isNatTypeMatching = (log, filter) => {\r\n        let matches = false;\r\n        if (filter.NatType1 === NatType.ANY && filter.NatType2 === NatType.ANY) {\r\n            matches = true;\r\n        } else if ((filter.NatType1 === NatType.ANY && filter.NatType2 !== NatType.ANY)) {\r\n            matches = (filter.NatType2 === log.peer_requester.nat_type || filter.NatType2 === log.peer_responder.nat_type)\r\n        } else if (filter.NatType2 === NatType.ANY && filter.NatType1 !== NatType.ANY) {\r\n            matches = (filter.NatType1 === log.peer_requester.nat_type || filter.NatType1 === log.peer_responder.nat_type)\r\n        } else if (filter.NatType1 !== NatType.ANY && filter.NatType2 !== NatType.ANY) {\r\n            matches = (log.peer_requester.nat_type === filter.NatType1 && log.peer_responder.nat_type === filter.NatType2) ||\r\n                (log.peer_requester.nat_type === filter.NatType2 && log.peer_responder.nat_type === filter.NatType1)\r\n        }\r\n        return matches;\r\n    }\r\n\r\n    const isOSMatching = (log, filter) => {\r\n        let matches = false;\r\n        if (filter.OSType1 === OS.ANY && filter.OSType2 === OS.ANY)\r\n            matches = true;\r\n        else if ((filter.OSType1 === OS.ANY && filter.OSType2 !== OS.ANY))\r\n            matches = (filter.OSType2 === log.peer_requester.os || filter.OSType2 === log.peer_responder.os)\r\n        else if ((filter.OSType2 === OS.ANY && filter.OSType1 !== OS.ANY))\r\n            matches = (filter.OSType1 === log.peer_requester.os || filter.OSType1 === log.peer_responder.os)\r\n        else if (filter.OSType1 !== OS.ANY && filter.OSType2 !== OS.ANY)\r\n            matches = (log.peer_requester.os === filter.OSType1 && log.peer_responder.os === filter.OSType2) ||\r\n                (log.peer_requester.os === filter.OSType2 && log.peer_responder.os === filter.OSType1)\r\n        return matches;\r\n    }\r\n\r\n    // const isProtocolMatching = (log) => {\r\n    //     const { tcpHp, udpHp, direct } = filter.Protocol;\r\n    //     if (tcpHp && udpHp && direct) {\r\n    //         return true;\r\n    //     }\r\n    //     return (direct && log.is_direct_successful) ||\r\n    //         (tcpHp && log.tcp_hole_punch_result === 'Succeeded') ||\r\n    //         (udpHp && log.udp_hole_punch_result === 'Succeeded');\r\n    // }\r\n\r\n    const isCountryMatching = (log, filter) => {\r\n        const ANY = OS.ANY;\r\n        if (filter.CountryType1 === ANY && filter.CountryType2 === ANY)\r\n            return true;\r\n        else if ((filter.CountryType1 === ANY && filter.CountryType2 !== ANY))\r\n            return (filter.CountryType2 === log.peer_requester.geo_info.country_name || filter.CountryType2 === log.peer_responder.geo_info.country_name)\r\n        else if ((filter.CountryType2 === ANY && filter.CountryType1 !== ANY))\r\n            return (filter.CountryType1 === log.peer_requester.geo_info.country_name || filter.CountryType1 === log.peer_responder.geo_info.country_name)\r\n        else if (filter.CountryType1 !== ANY && filter.CountryType2 !== ANY)\r\n            return (log.peer_requester.geo_info.country_name === filter.CountryType1 && log.peer_responder.geo_info.country_name === filter.CountryType2) ||\r\n                (log.peer_requester.geo_info.country_name === filter.CountryType2 && log.peer_responder.geo_info.country_name === filter.CountryType1)\r\n    }\r\n\r\n    const isPeerIncluded = (arr, requesterPeerId, responderPeerId) => {\r\n        return arr.length === 0 ? true : (arr.indexOf(requesterPeerId) > -1 || arr.indexOf(responderPeerId) > -1);\r\n    }\r\n\r\n    const isPeerExcluded = (arr, requesterPeerId, responderPeerId) => {\r\n        return arr.length === 0 ? false : (arr.indexOf(requesterPeerId) > -1 || arr.indexOf(responderPeerId) > -1);\r\n    }\r\n\r\n    const prepareLogs = (logs, filter) => {\r\n        const osCountMap = {};\r\n        const countryCountMap = {};\r\n        const peerIdMap = [];\r\n        const successfulConnections = [];\r\n        const failedConnections = [];\r\n        let tcpHpCount=0;\r\n        let udpHpCount=0;\r\n        let directCount=0;\r\n        let from = new Date;\r\n        const activityTab = {\r\n            logs: [],\r\n            tcpHpCount: 0,\r\n            udpHpCount: 0,\r\n            directCount: 0,\r\n            successfulConnections: [],\r\n            failedConnections: []\r\n        }\r\n    \r\n        logs.forEach((log, i) => {\r\n            log.index = log.hasOwnProperty(\"index\") ? log.index : logs.length - i;\r\n            const requesterPeerId = generatePeerPublicInfo(log.peer_requester.name, log.peer_requester.id);\r\n            const responderPeerId = generatePeerPublicInfo(log.peer_responder.name, log.peer_responder.id);\r\n            const isFilteredPassed = isNatTypeMatching(log, filter) \r\n                && isOSMatching(log, filter) \r\n                // && isProtocolMatching(log) \r\n                && isCountryMatching(log, filter)\r\n                && isPeerIncluded(filter.IncludePeerId, requesterPeerId, responderPeerId)\r\n                && !isPeerExcluded(filter.ExcludePeerId, requesterPeerId, responderPeerId);\r\n            log.tcp_hole_punch_result === 'Succeeded' ? tcpHpCount++ : null;\r\n            log.udp_hole_punch_result === 'Succeeded' ? udpHpCount++ : null;\r\n            log.is_direct_successful? directCount++ : null;\r\n\r\n            const isSuccess = log.udp_hole_punch_result === 'Succeeded' || log.tcp_hole_punch_result === 'Succeeded' || log.is_direct_successful;\r\n            log.isSuccessful = isSuccess;\r\n\r\n            if (isFilteredPassed) {\r\n                log.tcp_hole_punch_result === 'Succeeded' ? activityTab.tcpHpCount++ : null;\r\n                log.udp_hole_punch_result === 'Succeeded' ? activityTab.udpHpCount++ : null;\r\n                log.is_direct_successful? activityTab.directCount++ : null;\r\n                (log.isSuccessful ? activityTab.successfulConnections : activityTab.failedConnections).push(log);\r\n                activityTab.logs.push(log);\r\n                if (!peerIdMap.includes(requesterPeerId)) {\r\n                    peerIdMap.push(requesterPeerId);\r\n                }\r\n                if (!peerIdMap.includes(responderPeerId)) {\r\n                    peerIdMap.push(responderPeerId)\r\n                }\r\n            }\r\n    \r\n            log.peer_requester.os = tranformOSName(log.peer_requester.os);\r\n            log.peer_responder.os = tranformOSName(log.peer_responder.os);\r\n            if (!osCountMap[log.peer_requester.os]) {\r\n                osCountMap[log.peer_requester.os] = 0;\r\n            }\r\n            if (!osCountMap[log.peer_responder.os]) {\r\n                osCountMap[log.peer_responder.os] = 0;\r\n            }\r\n            osCountMap[log.peer_requester.os] = osCountMap[log.peer_requester.os] + 1;\r\n            osCountMap[log.peer_responder.os] = osCountMap[log.peer_responder.os] + 1;\r\n            if (!countryCountMap[log.peer_requester.geo_info.country_name]) {\r\n                countryCountMap[log.peer_requester.geo_info.country_name] = 0;\r\n            }\r\n            if (!countryCountMap[log.peer_responder.geo_info.country_name]) {\r\n                countryCountMap[log.peer_responder.geo_info.country_name] = 0;\r\n            }\r\n            countryCountMap[log.peer_requester.geo_info.country_name] = countryCountMap[log.peer_requester.geo_info.country_name] + 1;\r\n            countryCountMap[log.peer_responder.geo_info.country_name] = countryCountMap[log.peer_responder.geo_info.country_name] + 1;\r\n            if (from > new Date(log.createdAt)) {\r\n                from = new Date(log.createdAt);\r\n            }\r\n            (isSuccess ? successfulConnections : failedConnections).push(log);\r\n        });\r\n        const osCount = osCountMap;\r\n        const countriesCount = countryCountMap;\r\n        const peerIds = peerIdMap;\r\n        return {\r\n            logs,\r\n            tcpHpCount,\r\n            udpHpCount,\r\n            directCount,\r\n            osCount,\r\n            countriesCount,\r\n            peerIds,\r\n            successfulConnections,\r\n            failedConnections,\r\n            dateRange: {\r\n                from,\r\n                to: new Date\r\n            },\r\n            activityTab\r\n        };\r\n    };\r\n\r\n    const filterPieData = (logs, filter) => {\r\n        let total = 0\r\n        let success = 0\r\n        logs.filter(log => {\r\n            total++;\r\n            const tcpResult = filter.tcpHp ? log.tcp_hole_punch_result === 'Succeeded' : false;\r\n            const udpResult = filter.udpHp ? log.udp_hole_punch_result === 'Succeeded' : false;\r\n            const directResult = filter.direct ? log.is_direct_successful : false;\r\n            if (tcpResult || udpResult || directResult) {\r\n                success++;\r\n            }\r\n        })\r\n        return {\r\n            data: {\r\n                total,\r\n                success\r\n            },\r\n            filter\r\n        };\r\n    }\r\n\r\n    const {type, payload} = msg;\r\n    switch(type) {\r\n        case 'PREPARE_LOGS':\r\n        case 'REVALIDATE':\r\n            return prepareLogs(payload.logs, payload.filter);\r\n        \r\n        case 'FILTER_PIE_CHART':\r\n            return filterPieData(payload.logs, payload.filter);\r\n        \r\n        case 'FILTER_NAME':\r\n            return payload.data.filter(item => item.search(new RegExp(payload.search,\"i\")) !== -1)\r\n        default:\r\n        return;\r\n    }\r\n};\r\n\r\nRegister(customWorker);"]}