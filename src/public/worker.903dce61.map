{"version":3,"sources":["..\\node_modules\\promise-worker\\register.js","..\\app\\redux\\dispatcher\\worker.js"],"names":["customWorker","msg","NatType","ANY","EDM","EIM","OS","Windows","OSX","LINUX","tranformOSName","osName","toLowerCase","generatePeerPublicInfo","name","id","prepareLogs","logs","osCountMap","countryCountMap","peerIdMap","successfulConnections","failedConnections","tcpHpCount","udpHpCount","directCount","from","Date","forEach","log","i","index","hasOwnProperty","length","tcp_hole_punch_result","udp_hole_punch_result","is_direct_successful","isSuccess","isSuccessful","requesterPeerId","peer_requester","responderPeerId","peer_responder","includes","push","os","geo_info","country_name","createdAt","osCount","countriesCount","peerIds","dateRange","to","applyFilter","filter","isNatTypeMatching","matches","NatType1","NatType2","nat_type","isOSMatching","OSType1","OSType2","isCountryMatching","CountryType1","CountryType2","isPeerIncluded","arr","indexOf","isPeerExcluded","IncludePeerId","ExcludePeerId","filterPieData","total","success","tcpResult","tcpHp","udpResult","udpHp","directResult","direct","data","type","payload","filteredLogs","item","search","RegExp"],"mappings":"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","file":"worker.903dce61.map","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nfunction isPromise (obj) {\n  // via https://unpkg.com/is-promise@2.1.0/index.js\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function'\n}\n\nfunction registerPromiseWorker (callback) {\n  function postOutgoingMessage (e, messageId, error, result) {\n    function postMessage (msg) {\n      /* istanbul ignore if */\n      if (typeof self.postMessage !== 'function') { // service worker\n        e.ports[0].postMessage(msg)\n      } else { // web worker\n        self.postMessage(msg)\n      }\n    }\n    if (error) {\n      /* istanbul ignore else */\n      if (typeof console !== 'undefined' && 'error' in console) {\n        // This is to make errors easier to debug. I think it's important\n        // enough to just leave here without giving the user an option\n        // to silence it.\n        console.error('Worker caught an error:', error)\n      }\n      postMessage([messageId, {\n        message: error.message\n      }])\n    } else {\n      postMessage([messageId, null, result])\n    }\n  }\n\n  function tryCatchFunc (callback, message) {\n    try {\n      return { res: callback(message) }\n    } catch (e) {\n      return { err: e }\n    }\n  }\n\n  function handleIncomingMessage (e, callback, messageId, message) {\n    var result = tryCatchFunc(callback, message)\n\n    if (result.err) {\n      postOutgoingMessage(e, messageId, result.err)\n    } else if (!isPromise(result.res)) {\n      postOutgoingMessage(e, messageId, null, result.res)\n    } else {\n      result.res.then(function (finalResult) {\n        postOutgoingMessage(e, messageId, null, finalResult)\n      }, function (finalError) {\n        postOutgoingMessage(e, messageId, finalError)\n      })\n    }\n  }\n\n  function onIncomingMessage (e) {\n    var payload = e.data\n    if (!Array.isArray(payload) || payload.length !== 2) {\n      // message doens't match communication format; ignore\n      return\n    }\n    var messageId = payload[0]\n    var message = payload[1]\n\n    if (typeof callback !== 'function') {\n      postOutgoingMessage(e, messageId, new Error(\n        'Please pass a function into register().'))\n    } else {\n      handleIncomingMessage(e, callback, messageId, message)\n    }\n  }\n\n  self.addEventListener('message', onIncomingMessage)\n}\n\nmodule.exports = registerPromiseWorker\n","import Register from 'promise-worker/register';\r\nconst customWorker = (msg) => {    \r\n    const NatType = {\r\n        ANY: 'Any',\r\n        EDM: 'EDM',\r\n        EIM: 'EIM'\r\n    }\r\n\r\n    const OS = {\r\n        ANY: 'Any',\r\n        Windows: 'Windows',\r\n        OSX: 'MacOS',\r\n        LINUX: 'Linux'\r\n    }\r\n\r\n    // const PROTOCOL = {\r\n    //     ANY: 'Any',\r\n    //     // TCP_DIRECT: 'TCP_DIRECT',\r\n    //     UDP_HP: 'UDP_HP',\r\n    //     TCP_HP: 'TCP_HP'\r\n    // }\r\n\r\n    const tranformOSName = (osName) => {\r\n        switch (osName.toLowerCase()) {\r\n            case 'linux':\r\n                return OS.LINUX;\r\n            case 'macos':\r\n                return OS.OSX;\r\n            case 'windows':\r\n                return OS.Windows;\r\n            default:\r\n                return osName;\r\n        }\r\n    };\r\n\r\n    const generatePeerPublicInfo = (name, id) => {\r\n        return name + '(' + id + ')'\r\n    };\r\n\r\n    const prepareLogs = (logs) => {\r\n        const osCountMap = {};\r\n        const countryCountMap = {};\r\n        const peerIdMap = [];\r\n        const successfulConnections = [];\r\n        const failedConnections = [];\r\n        let tcpHpCount=0;\r\n        let udpHpCount=0;\r\n        let directCount=0;\r\n        let from = new Date;\r\n    \r\n        logs.forEach((log, i) => {\r\n            log.index = log.hasOwnProperty(\"index\") ? log.index : logs.length - i;\r\n            log.tcp_hole_punch_result === 'Succeeded' ? tcpHpCount++ : null;\r\n            log.udp_hole_punch_result === 'Succeeded' ? udpHpCount++ : null;\r\n            log.is_direct_successful? directCount++ : null;\r\n\r\n            const isSuccess = log.udp_hole_punch_result === 'Succeeded' || log.tcp_hole_punch_result === 'Succeeded' || log.is_direct_successful;\r\n            log.isSuccessful = isSuccess;\r\n    \r\n            const requesterPeerId = generatePeerPublicInfo(log.peer_requester.name, log.peer_requester.id);\r\n            const responderPeerId = generatePeerPublicInfo(log.peer_responder.name, log.peer_responder.id);\r\n            if (!peerIdMap.includes(requesterPeerId)) {\r\n                peerIdMap.push(requesterPeerId);\r\n            }\r\n            if (!peerIdMap.includes(responderPeerId)) {\r\n                peerIdMap.push(responderPeerId)\r\n            }\r\n    \r\n            log.peer_requester.os = tranformOSName(log.peer_requester.os);\r\n            log.peer_responder.os = tranformOSName(log.peer_responder.os);\r\n            if (!osCountMap[log.peer_requester.os]) {\r\n                osCountMap[log.peer_requester.os] = 0;\r\n            }\r\n            if (!osCountMap[log.peer_responder.os]) {\r\n                osCountMap[log.peer_responder.os] = 0;\r\n            }\r\n            osCountMap[log.peer_requester.os] = osCountMap[log.peer_requester.os] + 1;\r\n            osCountMap[log.peer_responder.os] = osCountMap[log.peer_responder.os] + 1;\r\n            if (!countryCountMap[log.peer_requester.geo_info.country_name]) {\r\n                countryCountMap[log.peer_requester.geo_info.country_name] = 0;\r\n            }\r\n            if (!countryCountMap[log.peer_responder.geo_info.country_name]) {\r\n                countryCountMap[log.peer_responder.geo_info.country_name] = 0;\r\n            }\r\n            countryCountMap[log.peer_requester.geo_info.country_name] = countryCountMap[log.peer_requester.geo_info.country_name] + 1;\r\n            countryCountMap[log.peer_responder.geo_info.country_name] = countryCountMap[log.peer_responder.geo_info.country_name] + 1;\r\n            if (from > new Date(log.createdAt)) {\r\n                from = new Date(log.createdAt);\r\n            }\r\n            (isSuccess ? successfulConnections : failedConnections).push(log);\r\n        });\r\n        const osCount = osCountMap;\r\n        const countriesCount = countryCountMap;\r\n        const peerIds = peerIdMap;\r\n        return {\r\n            logs,\r\n            tcpHpCount,\r\n            udpHpCount,\r\n            directCount,\r\n            osCount,\r\n            countriesCount,\r\n            peerIds,\r\n            successfulConnections,\r\n            failedConnections,\r\n            dateRange: {\r\n                from,\r\n                to: new Date\r\n            }\r\n        };\r\n    };\r\n\r\n    const applyFilter = (logs, filter) => {\r\n        const isNatTypeMatching = (log) => {\r\n            let matches = false;\r\n            if (filter.NatType1 === NatType.ANY && filter.NatType2 === NatType.ANY) {\r\n                matches = true;\r\n            } else if ((filter.NatType1 === NatType.ANY && filter.NatType2 !== NatType.ANY)) {\r\n                matches = (filter.NatType2 === log.peer_requester.nat_type || filter.NatType2 === log.peer_responder.nat_type)\r\n            } else if (filter.NatType2 === NatType.ANY && filter.NatType1 !== NatType.ANY) {\r\n                matches = (filter.NatType1 === log.peer_requester.nat_type || filter.NatType1 === log.peer_responder.nat_type)\r\n            } else if (filter.NatType1 !== NatType.ANY && filter.NatType2 !== NatType.ANY) {\r\n                matches = (log.peer_requester.nat_type === filter.NatType1 && log.peer_responder.nat_type === filter.NatType2) ||\r\n                    (log.peer_requester.nat_type === filter.NatType2 && log.peer_responder.nat_type === filter.NatType1)\r\n            }\r\n            return matches;\r\n        }\r\n    \r\n        const isOSMatching = (log) => {\r\n            let matches = false;\r\n            if (filter.OSType1 === OS.ANY && filter.OSType2 === OS.ANY)\r\n                matches = true;\r\n            else if ((filter.OSType1 === OS.ANY && filter.OSType2 !== OS.ANY))\r\n                matches = (filter.OSType2 === log.peer_requester.os || filter.OSType2 === log.peer_responder.os)\r\n            else if ((filter.OSType2 === OS.ANY && filter.OSType1 !== OS.ANY))\r\n                matches = (filter.OSType1 === log.peer_requester.os || filter.OSType1 === log.peer_responder.os)\r\n            else if (filter.OSType1 !== OS.ANY && filter.OSType2 !== OS.ANY)\r\n                matches = (log.peer_requester.os === filter.OSType1 && log.peer_responder.os === filter.OSType2) ||\r\n                    (log.peer_requester.os === filter.OSType2 && log.peer_responder.os === filter.OSType1)\r\n            return matches;\r\n        }\r\n    \r\n        // const isProtocolMatching = (log) => {\r\n        //     const { tcpHp, udpHp, direct } = filter.Protocol;\r\n        //     if (tcpHp && udpHp && direct) {\r\n        //         return true;\r\n        //     }\r\n        //     return (direct && log.is_direct_successful) ||\r\n        //         (tcpHp && log.tcp_hole_punch_result === 'Succeeded') ||\r\n        //         (udpHp && log.udp_hole_punch_result === 'Succeeded');\r\n        // }\r\n    \r\n        const isCountryMatching = (log) => {\r\n            const ANY = OS.ANY;\r\n            if (filter.CountryType1 === ANY && filter.CountryType2 === ANY)\r\n                return true;\r\n            else if ((filter.CountryType1 === ANY && filter.CountryType2 !== ANY))\r\n                return (filter.CountryType2 === log.peer_requester.geo_info.country_name || filter.CountryType2 === log.peer_responder.geo_info.country_name)\r\n            else if ((filter.CountryType2 === ANY && filter.CountryType1 !== ANY))\r\n                return (filter.CountryType1 === log.peer_requester.geo_info.country_name || filter.CountryType1 === log.peer_responder.geo_info.country_name)\r\n            else if (filter.CountryType1 !== ANY && filter.CountryType2 !== ANY)\r\n                return (log.peer_requester.geo_info.country_name === filter.CountryType1 && log.peer_responder.geo_info.country_name === filter.CountryType2) ||\r\n                    (log.peer_requester.geo_info.country_name === filter.CountryType2 && log.peer_responder.geo_info.country_name === filter.CountryType1)\r\n        }\r\n    \r\n        const isPeerIncluded = (arr, requesterPeerId, responderPeerId) => {\r\n            return arr.length === 0 ? true : (arr.indexOf(requesterPeerId) > -1 || arr.indexOf(responderPeerId) > -1);\r\n        }\r\n\r\n        const isPeerExcluded = (arr, requesterPeerId, responderPeerId) => {\r\n            return arr.length === 0 ? false : (arr.indexOf(requesterPeerId) > -1 || arr.indexOf(responderPeerId) > -1);\r\n        }\r\n\r\n        return logs.filter(log => {\r\n            const requesterPeerId = generatePeerPublicInfo(log.peer_requester.name, log.peer_requester.id);\r\n            const responderPeerId = generatePeerPublicInfo(log.peer_responder.name, log.peer_responder.id);\r\n            \r\n            return isNatTypeMatching(log) \r\n                && isOSMatching(log) \r\n                // && isProtocolMatching(log) \r\n                && isCountryMatching(log)\r\n                && isPeerIncluded(filter.IncludePeerId, requesterPeerId, responderPeerId)\r\n                && !isPeerExcluded(filter.ExcludePeerId, requesterPeerId, responderPeerId);\r\n        });\r\n    };\r\n\r\n    const filterPieData = (logs, filter) => {\r\n        let total = 0\r\n        let success = 0\r\n        logs.filter(log => {\r\n            total++;\r\n            const tcpResult = filter.tcpHp ? log.tcp_hole_punch_result === 'Succeeded' : false;\r\n            const udpResult = filter.udpHp ? log.udp_hole_punch_result === 'Succeeded' : false;\r\n            const directResult = filter.direct ? log.is_direct_successful : false;\r\n            if (tcpResult || udpResult || directResult) {\r\n                success++;\r\n            }\r\n        })\r\n        return {\r\n            data: {\r\n                total,\r\n                success\r\n            },\r\n            filter\r\n        };\r\n    }\r\n\r\n    const {type, payload} = msg;\r\n    switch(type) {\r\n        case 'PREPARE_LOGS':\r\n            return prepareLogs(payload);\r\n\r\n        case 'REVALIDATE':\r\n            const filteredLogs = applyFilter(payload.logs, payload.filter);\r\n            return prepareLogs(filteredLogs);\r\n        \r\n        case 'FILTER_PIE_CHART':\r\n            return filterPieData(payload.logs, payload.filter);\r\n        \r\n        case 'FILTER_NAME':\r\n            return payload.data.filter(item => item.search(new RegExp(payload.search,\"i\")) !== -1)\r\n        default:\r\n        return;\r\n    }\r\n};\r\n\r\nRegister(customWorker);"]}